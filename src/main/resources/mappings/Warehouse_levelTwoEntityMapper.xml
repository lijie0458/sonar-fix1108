<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
  automatically generated Warehouse_levelTwoEntity Mapper xml
-->
<mapper namespace="com.dogfood.aa20240808.repository.entities.Warehouse_levelTwoEntityMapper">
    <resultMap id="BaseResultMap" type="com.dogfood.aa20240808.domain.entities.Warehouse_levelTwoEntity">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
        <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
        <result column="warehouse_code" jdbcType="VARCHAR" property="warehouse_code" />
        <result column="warehouse_name" jdbcType="VARCHAR" property="warehouse_name" />
        <result column="parent_warehouse__id" jdbcType="BIGINT" property="parent_warehouse_Id" />
        <result column="address" jdbcType="VARCHAR" property="address" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="warehouse_manager" jdbcType="BIGINT" property="warehouse_manager" />
        <result column="detailed_address" jdbcType="VARCHAR" property="detailedAddress" />
    </resultMap>

    <!--
       ###################################################
       ######### mysql
       ###################################################
     -->
    <insert id="insert" parameterType="com.dogfood.aa20240808.domain.entities.Warehouse_levelTwoEntity"  >
        INSERT INTO `warehouse_level_two` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`warehouse_code`
            ,`warehouse_name`
            ,`parent_warehouse__id`
            ,`address`
            ,`remark`
            ,`warehouse_manager`
            ,`detailed_address`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{createdTime,jdbcType=TIMESTAMP}
            ,#{updatedTime,jdbcType=TIMESTAMP}
            ,#{createdBy,jdbcType=VARCHAR}
            ,#{updatedBy,jdbcType=VARCHAR}
            ,#{warehouse_code,jdbcType=VARCHAR}
            ,#{warehouse_name,jdbcType=VARCHAR}
            ,#{parent_warehouse_Id,jdbcType=BIGINT}
            ,#{address,jdbcType=VARCHAR}
            ,#{remark,jdbcType=VARCHAR}
            ,#{warehouse_manager,jdbcType=BIGINT}
            ,#{detailedAddress,jdbcType=VARCHAR}
        )
    </insert>

    <insert id="batchInsert"  parameterType="java.util.List" >
        INSERT INTO `warehouse_level_two` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`warehouse_code`
            ,`warehouse_name`
            ,`parent_warehouse__id`
            ,`address`
            ,`remark`
            ,`warehouse_manager`
            ,`detailed_address`
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.id,jdbcType=BIGINT}
            ,#{item.createdTime,jdbcType=TIMESTAMP}
            ,#{item.updatedTime,jdbcType=TIMESTAMP}
            ,#{item.createdBy,jdbcType=VARCHAR}
            ,#{item.updatedBy,jdbcType=VARCHAR}
            ,#{item.warehouse_code,jdbcType=VARCHAR}
            ,#{item.warehouse_name,jdbcType=VARCHAR}
            ,#{item.parent_warehouse_Id,jdbcType=BIGINT}
            ,#{item.address,jdbcType=VARCHAR}
            ,#{item.remark,jdbcType=VARCHAR}
            ,#{item.warehouse_manager,jdbcType=BIGINT}
            ,#{item.detailedAddress,jdbcType=VARCHAR}
         )
        </foreach>
    </insert>

    <update id="update" parameterType="com.dogfood.aa20240808.domain.entities.Warehouse_levelTwoEntity" >
        UPDATE `warehouse_level_two`
        <set>
            <if test="updateFields == null or updateFields.contains('createdTime')">`created_time` = #{bean.createdTime, jdbcType= TIMESTAMP},</if>
            <if test="updateFields == null or updateFields.contains('updatedTime')">`updated_time` = #{bean.updatedTime, jdbcType= TIMESTAMP},</if>
            <if test="updateFields == null or updateFields.contains('createdBy')">`created_by` = #{bean.createdBy, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('updatedBy')">`updated_by` = #{bean.updatedBy, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('warehouse_code')">`warehouse_code` = #{bean.warehouse_code, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('warehouse_name')">`warehouse_name` = #{bean.warehouse_name, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('parent_warehouse_Id')">`parent_warehouse__id` = #{bean.parent_warehouse_Id, jdbcType= BIGINT},</if>
            <if test="updateFields == null or updateFields.contains('address')">`address` = #{bean.address, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('remark')">`remark` = #{bean.remark, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('warehouse_manager')">`warehouse_manager` = #{bean.warehouse_manager, jdbcType= BIGINT},</if>
            <if test="updateFields == null or updateFields.contains('detailedAddress')">`detailed_address` = #{bean.detailedAddress, jdbcType= VARCHAR},</if>
        </set>
        where `id` = #{bean.id}
    </update>

    <update id="batchUpdate" parameterType="com.dogfood.aa20240808.domain.entities.Warehouse_levelTwoEntity" >
        UPDATE `warehouse_level_two`
        <set>
            <if test="updateFields == null or updateFields.contains('createdTime')">
                `created_time` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.createdTime, jdbcType=TIMESTAMP}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('updatedTime')">
                `updated_time` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.updatedTime, jdbcType=TIMESTAMP}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('createdBy')">
                `created_by` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.createdBy, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('updatedBy')">
                `updated_by` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.updatedBy, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('warehouse_code')">
                `warehouse_code` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.warehouse_code, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('warehouse_name')">
                `warehouse_name` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.warehouse_name, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('parent_warehouse_Id')">
                `parent_warehouse__id` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.parent_warehouse_Id, jdbcType=BIGINT}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('address')">
                `address` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.address, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('remark')">
                `remark` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.remark, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('warehouse_manager')">
                `warehouse_manager` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.warehouse_manager, jdbcType=BIGINT}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('detailedAddress')">
                `detailed_address` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.detailedAddress, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
        </set>
        where `id` in
        <foreach collection="beans" item="bean" index="index" separator="," open="(" close=")">
            #{bean.id}
        </foreach>
    </update>


    <delete id="delete" parameterType="java.lang.Long" >
        DELETE FROM `warehouse_level_two` where `id` = #{id}
    </delete>


    <delete id="batchDelete" >
        DELETE FROM `warehouse_level_two` where `id` in
        <foreach collection="list" item="pkValueItem" index="index"  separator="," open="(" close=")">
            #{pkValueItem}
        </foreach>
    </delete>

    <delete id="deleteReference">
        DELETE FROM `warehouse_level_two`
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'createdTime'">
                    AND `created_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'updatedTime'">
                    AND `updated_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'createdBy'">
                    AND `created_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'updatedBy'">
                    AND `updated_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_code'">
                    AND `warehouse_code` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_name'">
                    AND `warehouse_name` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'parent_warehouse_Id'">
                    AND `parent_warehouse__id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'address'">
                    AND `address` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'remark'">
                    AND `remark` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_manager'">
                    AND `warehouse_manager` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'detailedAddress'">
                    AND `detailed_address` = #{value, jdbcType=VARCHAR}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
    </delete>

    <select id="existReference" resultType="java.lang.Long" >
        select `id` from `warehouse_level_two` 
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'createdTime'">
                    AND `created_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'updatedTime'">
                    AND `updated_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'createdBy'">
                    AND `created_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'updatedBy'">
                    AND `updated_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_code'">
                    AND `warehouse_code` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_name'">
                    AND `warehouse_name` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'parent_warehouse_Id'">
                    AND `parent_warehouse__id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'address'">
                    AND `address` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'remark'">
                    AND `remark` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'warehouse_manager'">
                    AND `warehouse_manager` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'detailedAddress'">
                    AND `detailed_address` = #{value, jdbcType=VARCHAR}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
         LIMIT 1
    </select>


    <select id="selectOne" resultMap="BaseResultMap" >
        select *
        from `warehouse_level_two`
        where `id`=#{id}
    </select>

    <insert id="createOrUpdate" parameterType="com.dogfood.aa20240808.domain.entities.Warehouse_levelTwoEntity">
        INSERT INTO `warehouse_level_two` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`warehouse_code`
            ,`warehouse_name`
            ,`parent_warehouse__id`
            ,`address`
            ,`remark`
            ,`warehouse_manager`
            ,`detailed_address`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{createdTime,jdbcType=TIMESTAMP}
            ,#{updatedTime,jdbcType=TIMESTAMP}
            ,#{createdBy,jdbcType=VARCHAR}
            ,#{updatedBy,jdbcType=VARCHAR}
            ,#{warehouse_code,jdbcType=VARCHAR}
            ,#{warehouse_name,jdbcType=VARCHAR}
            ,#{parent_warehouse_Id,jdbcType=BIGINT}
            ,#{address,jdbcType=VARCHAR}
            ,#{remark,jdbcType=VARCHAR}
            ,#{warehouse_manager,jdbcType=BIGINT}
            ,#{detailedAddress,jdbcType=VARCHAR}
        )
    </insert>


    <update id="updateBy">
        UPDATE `warehouse_level_two`
        <set>
        <if test="updateFields == null or updateFields.contains('createdTime')">`created_time` = #{bean.createdTime, jdbcType= TIMESTAMP},</if>
        <if test="updateFields == null or updateFields.contains('updatedTime')">`updated_time` = #{bean.updatedTime, jdbcType= TIMESTAMP},</if>
        <if test="updateFields == null or updateFields.contains('createdBy')">`created_by` = #{bean.createdBy, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('updatedBy')">`updated_by` = #{bean.updatedBy, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('warehouse_code')">`warehouse_code` = #{bean.warehouse_code, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('warehouse_name')">`warehouse_name` = #{bean.warehouse_name, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('parent_warehouse_Id')">`parent_warehouse__id` = #{bean.parent_warehouse_Id, jdbcType= BIGINT},</if>
        <if test="updateFields == null or updateFields.contains('address')">`address` = #{bean.address, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('remark')">`remark` = #{bean.remark, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('warehouse_manager')">`warehouse_manager` = #{bean.warehouse_manager, jdbcType= BIGINT},</if>
        <if test="updateFields == null or updateFields.contains('detailedAddress')">`detailed_address` = #{bean.detailedAddress, jdbcType= VARCHAR},</if>
        </set>
        where ${filter.sql("mysql")} 

    </update>

    <delete id="deleteBy" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter">
        DELETE FROM `warehouse_level_two`
        where ${filter.sql("mysql")} 
    </delete>
    <select id="selectList" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultMap="BaseResultMap" >
        select *
        from `warehouse_level_two`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>

    <select id="count" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultType="java.lang.Integer" >
        select count(1) from `warehouse_level_two`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>
</mapper>