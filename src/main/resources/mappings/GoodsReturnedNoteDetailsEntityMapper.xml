<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
  automatically generated GoodsReturnedNoteDetailsEntity Mapper xml
-->
<mapper namespace="com.dogfood.aa20240808.repository.entities.GoodsReturnedNoteDetailsEntityMapper">
    <resultMap id="BaseResultMap" type="com.dogfood.aa20240808.domain.entities.GoodsReturnedNoteDetailsEntity">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="goods_returned_note" jdbcType="VARCHAR" property="goodsReturnedNote" />
        <result column="be_put_in_storage_quantity" jdbcType="DECIMAL" property="bePutInStorageQuantity" />
        <result column="material_number" jdbcType="VARCHAR" property="materialNumber" />
        <result column="batch_number" jdbcType="VARCHAR" property="batchNumber" />
        <result column="be_put_in_storage_details_id" jdbcType="BIGINT" property="bePutInStorageDetailsId" />
    </resultMap>

    <!--
       ###################################################
       ######### mysql
       ###################################################
     -->
    <insert id="insert" parameterType="com.dogfood.aa20240808.domain.entities.GoodsReturnedNoteDetailsEntity"  >
        INSERT INTO `goods_returned_note_details` (
            `id`
            ,`goods_returned_note`
            ,`be_put_in_storage_quantity`
            ,`material_number`
            ,`batch_number`
            ,`be_put_in_storage_details_id`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{goodsReturnedNote,jdbcType=VARCHAR}
            ,#{bePutInStorageQuantity,jdbcType=DECIMAL}
            ,#{materialNumber,jdbcType=VARCHAR}
            ,#{batchNumber,jdbcType=VARCHAR}
            ,#{bePutInStorageDetailsId,jdbcType=BIGINT}
        )
    </insert>

    <insert id="batchInsert"  parameterType="java.util.List" >
        INSERT INTO `goods_returned_note_details` (
            `id`
            ,`goods_returned_note`
            ,`be_put_in_storage_quantity`
            ,`material_number`
            ,`batch_number`
            ,`be_put_in_storage_details_id`
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.id,jdbcType=BIGINT}
            ,#{item.goodsReturnedNote,jdbcType=VARCHAR}
            ,#{item.bePutInStorageQuantity,jdbcType=DECIMAL}
            ,#{item.materialNumber,jdbcType=VARCHAR}
            ,#{item.batchNumber,jdbcType=VARCHAR}
            ,#{item.bePutInStorageDetailsId,jdbcType=BIGINT}
         )
        </foreach>
    </insert>

    <update id="update" parameterType="com.dogfood.aa20240808.domain.entities.GoodsReturnedNoteDetailsEntity" >
        UPDATE `goods_returned_note_details`
        <set>
            <if test="updateFields == null or updateFields.contains('goodsReturnedNote')">`goods_returned_note` = #{bean.goodsReturnedNote, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('bePutInStorageQuantity')">`be_put_in_storage_quantity` = #{bean.bePutInStorageQuantity, jdbcType= DECIMAL},</if>
            <if test="updateFields == null or updateFields.contains('materialNumber')">`material_number` = #{bean.materialNumber, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('batchNumber')">`batch_number` = #{bean.batchNumber, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('bePutInStorageDetailsId')">`be_put_in_storage_details_id` = #{bean.bePutInStorageDetailsId, jdbcType= BIGINT},</if>
        </set>
        where `id` = #{bean.id}
    </update>

    <update id="batchUpdate" parameterType="com.dogfood.aa20240808.domain.entities.GoodsReturnedNoteDetailsEntity" >
        UPDATE `goods_returned_note_details`
        <set>
            <if test="updateFields == null or updateFields.contains('goodsReturnedNote')">
                `goods_returned_note` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.goodsReturnedNote, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('bePutInStorageQuantity')">
                `be_put_in_storage_quantity` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.bePutInStorageQuantity, jdbcType=DECIMAL}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('materialNumber')">
                `material_number` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.materialNumber, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('batchNumber')">
                `batch_number` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.batchNumber, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('bePutInStorageDetailsId')">
                `be_put_in_storage_details_id` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.bePutInStorageDetailsId, jdbcType=BIGINT}
                </foreach>
                END,
            </if>
        </set>
        where `id` in
        <foreach collection="beans" item="bean" index="index" separator="," open="(" close=")">
            #{bean.id}
        </foreach>
    </update>


    <delete id="delete" parameterType="java.lang.Long" >
        DELETE FROM `goods_returned_note_details` where `id` = #{id}
    </delete>


    <delete id="batchDelete" >
        DELETE FROM `goods_returned_note_details` where `id` in
        <foreach collection="list" item="pkValueItem" index="index"  separator="," open="(" close=")">
            #{pkValueItem}
        </foreach>
    </delete>

    <delete id="deleteReference">
        DELETE FROM `goods_returned_note_details`
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'goodsReturnedNote'">
                    AND `goods_returned_note` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'bePutInStorageQuantity'">
                    AND `be_put_in_storage_quantity` = #{value, jdbcType=DECIMAL}
                </when>
                <when test="property == 'materialNumber'">
                    AND `material_number` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'batchNumber'">
                    AND `batch_number` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'bePutInStorageDetailsId'">
                    AND `be_put_in_storage_details_id` = #{value, jdbcType=BIGINT}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
    </delete>

    <select id="existReference" resultType="java.lang.Long" >
        select `id` from `goods_returned_note_details` 
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'goodsReturnedNote'">
                    AND `goods_returned_note` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'bePutInStorageQuantity'">
                    AND `be_put_in_storage_quantity` = #{value, jdbcType=DECIMAL}
                </when>
                <when test="property == 'materialNumber'">
                    AND `material_number` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'batchNumber'">
                    AND `batch_number` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'bePutInStorageDetailsId'">
                    AND `be_put_in_storage_details_id` = #{value, jdbcType=BIGINT}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
         LIMIT 1
    </select>


    <select id="selectOne" resultMap="BaseResultMap" >
        select *
        from `goods_returned_note_details`
        where `id`=#{id}
    </select>

    <insert id="createOrUpdate" parameterType="com.dogfood.aa20240808.domain.entities.GoodsReturnedNoteDetailsEntity">
        INSERT INTO `goods_returned_note_details` (
            `id`
            ,`goods_returned_note`
            ,`be_put_in_storage_quantity`
            ,`material_number`
            ,`batch_number`
            ,`be_put_in_storage_details_id`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{goodsReturnedNote,jdbcType=VARCHAR}
            ,#{bePutInStorageQuantity,jdbcType=DECIMAL}
            ,#{materialNumber,jdbcType=VARCHAR}
            ,#{batchNumber,jdbcType=VARCHAR}
            ,#{bePutInStorageDetailsId,jdbcType=BIGINT}
        )
    </insert>


    <update id="updateBy">
        UPDATE `goods_returned_note_details`
        <set>
        <if test="updateFields == null or updateFields.contains('goodsReturnedNote')">`goods_returned_note` = #{bean.goodsReturnedNote, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('bePutInStorageQuantity')">`be_put_in_storage_quantity` = #{bean.bePutInStorageQuantity, jdbcType= DECIMAL},</if>
        <if test="updateFields == null or updateFields.contains('materialNumber')">`material_number` = #{bean.materialNumber, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('batchNumber')">`batch_number` = #{bean.batchNumber, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('bePutInStorageDetailsId')">`be_put_in_storage_details_id` = #{bean.bePutInStorageDetailsId, jdbcType= BIGINT},</if>
        </set>
        where ${filter.sql("mysql")} 

    </update>

    <delete id="deleteBy" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter">
        DELETE FROM `goods_returned_note_details`
        where ${filter.sql("mysql")} 
    </delete>
    <select id="selectList" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultMap="BaseResultMap" >
        select *
        from `goods_returned_note_details`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>

    <select id="count" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultType="java.lang.Integer" >
        select count(1) from `goods_returned_note_details`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>
</mapper>