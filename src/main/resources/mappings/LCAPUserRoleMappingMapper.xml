<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
  automatically generated LCAPUserRoleMapping Mapper xml
-->
<mapper namespace="com.dogfood.aa20240808.repository.entities.LCAPUserRoleMappingMapper">
    <resultMap id="BaseResultMap" type="com.dogfood.aa20240808.domain.entities.LCAPUserRoleMapping">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
        <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
        <result column="user_id" jdbcType="VARCHAR" property="userId" />
        <result column="role_id" jdbcType="BIGINT" property="roleId" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="source" jdbcType="VARCHAR" property="source" />
    </resultMap>

    <!--
       ###################################################
       ######### mysql
       ###################################################
     -->
    <insert id="insert" parameterType="com.dogfood.aa20240808.domain.entities.LCAPUserRoleMapping"  >
        INSERT INTO `lcap_user_role_mapping_a6d592` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`user_id`
            ,`role_id`
            ,`user_name`
            ,`source`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{createdTime,jdbcType=TIMESTAMP}
            ,#{updatedTime,jdbcType=TIMESTAMP}
            ,#{createdBy,jdbcType=VARCHAR}
            ,#{updatedBy,jdbcType=VARCHAR}
            ,#{userId,jdbcType=VARCHAR}
            ,#{roleId,jdbcType=BIGINT}
            ,#{userName,jdbcType=VARCHAR}
            ,#{source,jdbcType=VARCHAR}
        )
    </insert>

    <insert id="batchInsert"  parameterType="java.util.List" >
        INSERT INTO `lcap_user_role_mapping_a6d592` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`user_id`
            ,`role_id`
            ,`user_name`
            ,`source`
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.id,jdbcType=BIGINT}
            ,#{item.createdTime,jdbcType=TIMESTAMP}
            ,#{item.updatedTime,jdbcType=TIMESTAMP}
            ,#{item.createdBy,jdbcType=VARCHAR}
            ,#{item.updatedBy,jdbcType=VARCHAR}
            ,#{item.userId,jdbcType=VARCHAR}
            ,#{item.roleId,jdbcType=BIGINT}
            ,#{item.userName,jdbcType=VARCHAR}
            ,#{item.source,jdbcType=VARCHAR}
         )
        </foreach>
    </insert>

    <update id="update" parameterType="com.dogfood.aa20240808.domain.entities.LCAPUserRoleMapping" >
        UPDATE `lcap_user_role_mapping_a6d592`
        <set>
            <if test="updateFields == null or updateFields.contains('createdTime')">`created_time` = #{bean.createdTime, jdbcType= TIMESTAMP},</if>
            <if test="updateFields == null or updateFields.contains('updatedTime')">`updated_time` = #{bean.updatedTime, jdbcType= TIMESTAMP},</if>
            <if test="updateFields == null or updateFields.contains('createdBy')">`created_by` = #{bean.createdBy, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('updatedBy')">`updated_by` = #{bean.updatedBy, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('userId')">`user_id` = #{bean.userId, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('roleId')">`role_id` = #{bean.roleId, jdbcType= BIGINT},</if>
            <if test="updateFields == null or updateFields.contains('userName')">`user_name` = #{bean.userName, jdbcType= VARCHAR},</if>
            <if test="updateFields == null or updateFields.contains('source')">`source` = #{bean.source, jdbcType= VARCHAR},</if>
        </set>
        where `id` = #{bean.id}
    </update>

    <update id="batchUpdate" parameterType="com.dogfood.aa20240808.domain.entities.LCAPUserRoleMapping" >
        UPDATE `lcap_user_role_mapping_a6d592`
        <set>
            <if test="updateFields == null or updateFields.contains('createdTime')">
                `created_time` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.createdTime, jdbcType=TIMESTAMP}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('updatedTime')">
                `updated_time` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.updatedTime, jdbcType=TIMESTAMP}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('createdBy')">
                `created_by` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.createdBy, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('updatedBy')">
                `updated_by` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.updatedBy, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('userId')">
                `user_id` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.userId, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('roleId')">
                `role_id` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.roleId, jdbcType=BIGINT}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('userName')">
                `user_name` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.userName, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
            <if test="updateFields == null or updateFields.contains('source')">
                `source` = CASE `id`
                <foreach collection="beans" item="bean" index="index" separator=" ">
                    WHEN #{bean.id} THEN #{bean.source, jdbcType=VARCHAR}
                </foreach>
                END,
            </if>
        </set>
        where `id` in
        <foreach collection="beans" item="bean" index="index" separator="," open="(" close=")">
            #{bean.id}
        </foreach>
    </update>


    <delete id="delete" parameterType="java.lang.Long" >
        DELETE FROM `lcap_user_role_mapping_a6d592` where `id` = #{id}
    </delete>


    <delete id="batchDelete" >
        DELETE FROM `lcap_user_role_mapping_a6d592` where `id` in
        <foreach collection="list" item="pkValueItem" index="index"  separator="," open="(" close=")">
            #{pkValueItem}
        </foreach>
    </delete>

    <delete id="deleteReference">
        DELETE FROM `lcap_user_role_mapping_a6d592`
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'createdTime'">
                    AND `created_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'updatedTime'">
                    AND `updated_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'createdBy'">
                    AND `created_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'updatedBy'">
                    AND `updated_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'userId'">
                    AND `user_id` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'roleId'">
                    AND `role_id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'userName'">
                    AND `user_name` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'source'">
                    AND `source` = #{value, jdbcType=VARCHAR}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
    </delete>

    <select id="existReference" resultType="java.lang.Long" >
        select `id` from `lcap_user_role_mapping_a6d592` 
        <where>
            <choose>
                <when test="property == 'id'">
                    AND `id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'createdTime'">
                    AND `created_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'updatedTime'">
                    AND `updated_time` = #{value, jdbcType=TIMESTAMP}
                </when>
                <when test="property == 'createdBy'">
                    AND `created_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'updatedBy'">
                    AND `updated_by` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'userId'">
                    AND `user_id` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'roleId'">
                    AND `role_id` = #{value, jdbcType=BIGINT}
                </when>
                <when test="property == 'userName'">
                    AND `user_name` = #{value, jdbcType=VARCHAR}
                </when>
                <when test="property == 'source'">
                    AND `source` = #{value, jdbcType=VARCHAR}
                </when>
                <otherwise>
                    MUST BE ERROR
                </otherwise>
            </choose>
        </where>
         LIMIT 1
    </select>


    <select id="selectOne" resultMap="BaseResultMap" >
        select *
        from `lcap_user_role_mapping_a6d592`
        where `id`=#{id}
    </select>

    <insert id="createOrUpdate" parameterType="com.dogfood.aa20240808.domain.entities.LCAPUserRoleMapping">
        INSERT INTO `lcap_user_role_mapping_a6d592` (
            `id`
            ,`created_time`
            ,`updated_time`
            ,`created_by`
            ,`updated_by`
            ,`user_id`
            ,`role_id`
            ,`user_name`
            ,`source`
        )
        VALUES (
            #{id,jdbcType=BIGINT}
            ,#{createdTime,jdbcType=TIMESTAMP}
            ,#{updatedTime,jdbcType=TIMESTAMP}
            ,#{createdBy,jdbcType=VARCHAR}
            ,#{updatedBy,jdbcType=VARCHAR}
            ,#{userId,jdbcType=VARCHAR}
            ,#{roleId,jdbcType=BIGINT}
            ,#{userName,jdbcType=VARCHAR}
            ,#{source,jdbcType=VARCHAR}
        )
    </insert>


    <update id="updateBy">
        UPDATE `lcap_user_role_mapping_a6d592`
        <set>
        <if test="updateFields == null or updateFields.contains('createdTime')">`created_time` = #{bean.createdTime, jdbcType= TIMESTAMP},</if>
        <if test="updateFields == null or updateFields.contains('updatedTime')">`updated_time` = #{bean.updatedTime, jdbcType= TIMESTAMP},</if>
        <if test="updateFields == null or updateFields.contains('createdBy')">`created_by` = #{bean.createdBy, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('updatedBy')">`updated_by` = #{bean.updatedBy, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('userId')">`user_id` = #{bean.userId, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('roleId')">`role_id` = #{bean.roleId, jdbcType= BIGINT},</if>
        <if test="updateFields == null or updateFields.contains('userName')">`user_name` = #{bean.userName, jdbcType= VARCHAR},</if>
        <if test="updateFields == null or updateFields.contains('source')">`source` = #{bean.source, jdbcType= VARCHAR},</if>
        </set>
        where ${filter.sql("mysql")} 

    </update>

    <delete id="deleteBy" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter">
        DELETE FROM `lcap_user_role_mapping_a6d592`
        where ${filter.sql("mysql")} 
    </delete>
    <select id="selectList" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultMap="BaseResultMap" >
        select *
        from `lcap_user_role_mapping_a6d592`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>

    <select id="count" parameterType="com.dogfood.aa20240808.service.dto.filters.AbstractQueryFilter" resultType="java.lang.Integer" >
        select count(1) from `lcap_user_role_mapping_a6d592`
        <where>
            ${filter.sql("mysql")}
        </where>
    </select>
</mapper>